classdef mlib_im0 < handle
    properties
        POUT
        RPM
        VS
        IS
        PF
        POLES
        M
        NS
        NR
        BGAP
        BGAP_MIN
        BGAP_MAX
        BST
        BST_MIN
        BST_MAX
        BSY
        BSY_MIN
        BSY_MAX
        BRT
        BRT_MIN
        BRT_MAX
        BRY
        BRY_MIN
        BRY_MAX
        % dimension
        DSH
        DAIRGAP
        LD
        D
        ALPHAR
        ALPHAS
        GAP
        CONNECTION
        NPARALLEL
        POLEFLUX
        AIRGAPFLUX
        TST
        TRT
        TSP
        TRP
        RR1
        RR2
        RR3
        RS1
        RS2
        RS3
        LSTACK
        VPHASE
        WST
        WSY
        WRT
        WRY
        NCOIL
        Number
    end
    methods
        function obj = mlib_im0()
            obj.POUT = 750;
            obj.RPM = 1500;
            obj.VS = 220;
            obj.CONNECTION = 0;
            obj.M = 3;
            obj.POLES = 4;
            obj.NS = 24;
            obj.NR = 17;
            obj.BGAP = 0.8;
            obj.BST = 1.5;
            obj.BSY = 1.2;
            obj.BRT = 1.5;
            obj.BRY = 1.2;
            obj.DAIRGAP = 50;
            obj.D = 0.6;
            obj.GAP = 0.5;
            obj.ALPHAR = 0.5;
            obj.ALPHAS = 0.5;
            obj.LD = 1.5;
        end
        %% Setters
        function set_POUT(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Output power can not be a negative number.',varargin{2:end});
            else
                obj.POUT = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_RPM(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Speed can not be a negative number.',varargin{2:end});
            else
                obj.RPM = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_VS(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Input voltage can not be a negative number.',varargin{2:end});
            else
                obj.VS = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_POLES(obj,varargin)
            value = varargin{1};
            if value<0 || rem(value, 2)
                PrintError('Number of poles must be a even positive integer.',varargin{2:end});
            else
                obj.POLES = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_PF(obj,varargin)
            value = varargin{1};
            if value<0 || value>1
                PrintError('Power factor must be between 0 to 1.',varargin{2:end});
            else
                obj.PF = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_DAIRGAP(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Power factor must be between 0 to 1.',varargin{2:end});
            else
                obj.DAIRGAP = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_GAP(obj,varargin)
            value = varargin{1};
            if value<0.25 || value> 2
                PrintError('Power factor must be between 0 to 1.',varargin{2:end});
            else
                obj.GAP = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_NS(obj,varargin)
            value = varargin{1};
            if value<0 || rem(value,1)
                PrintError('Number of stator slot must be a positive integer.',varargin{2:end});
            elseif rem(value, obj.M)
                PrintError('Number of stator slot must be a multiple of number of phases.',varargin{2:end});
            else
                obj.NS = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_NR(obj,varargin)
            value = varargin{1};
            if value<0 || rem(value,1)
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.NR = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_M(obj,varargin)
            value = varargin{1};
            if value<0 || rem(value,1)
                PrintError('Number of phases must be a positive integer.',varargin{2:end});
            elseif rem(obj.NS, value)
                myStr = cell(3,1);
                myStr{1} = 'Number of stator slot must be a multiple of number of phases.';
                myStr{2} = 'Do you want to continue?';
                myStr{3} = 'If yes [NS] will be change to minimum possible value.';
                tmp = questdlg(myStr,'EMDLab','Yes','No','Yes');
                switch tmp
                    case 'Yes'
                        obj.M = value;
                        obj.NS = obj.M;
                        PrintWarning('Parameter has been changed conditionally.',varargin{2:end});
                        varargin{2}.UserData = false;
                    case 'No'
                        varargin{2}.UserData = false;
                end
            else
                obj.M = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_BGAP(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.BGAP = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_BGAP_MIN(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('BGAP_min must be a positive number.',varargin{2:end});
            elseif value>obj.BGAP_MAX
                PrintError('BGAP_min must be a lower than BGAP_max.',varargin{2:end});
            else
                obj.BGAP_MIN = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_BGAP_MAX(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('BGAP_MAX must be a positive number.',varargin{2:end});
            elseif value>obj.BGAP_MAX
                PrintError('BGAP_MAX must be a gater than BGAP_MIN.',varargin{2:end});
            else
                obj.BGAP_MAX = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_BST(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.BST = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_BSY(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.BSY = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_BRT(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.BRT = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_BRY(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.BRY = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_ALPHAR(obj,varargin)
            value = varargin{1};
            if value<0 || value>1
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.ALPHAR = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_ALPHAS(obj,varargin)
            value = varargin{1};
            if value<0 || value>1
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.ALPHAS = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_DSH(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.DSH = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_LD(obj,varargin)
            value = varargin{1};
            if value<0
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.LD = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function set_D(obj,varargin)
            value = varargin{1};
            if value<0 || value>1
                PrintError('Number of rotor slot must be a positive integer.',varargin{2:end});
            else
                obj.D = value;
                PrintGoodMessage(varargin{2:end});
            end
        end
        function y = get.TST(obj)
            y = 2*pi/obj.NS;
        end
        function y = get.TRT(obj)
            y = 2*pi/obj.NR;
        end
        function y = get.TSP(obj)
            y = 2*pi/obj.POLES;
        end
        function y = get.TRP(obj)
            y = 2*pi/obj.POLES;
        end
        function i2dUpdate_LSTACK_By_DAIRGAP_LD(obj)
            obj.LSTACK = obj.DAIRGAP*obj.LD;
        end
        function y = get.AIRGAPFLUX(obj)
            y = pi*obj.DAIRGAP*obj.LSTACK*obj.BGAP*1e-6;
        end
        function y = get.POLEFLUX(obj)
            y = obj.AIRGAPFLUX/obj.POLES;
        end
        function y = get.RR1(obj)
            y = obj.DSH/2;
        end
        function y = get.RR2(obj)
            y = obj.RR1+obj.WRY;
        end
        function y = get.RS1(obj)
            y = obj.DAIRGAP/2+obj.GAP;
        end
        function y = get.RS3(obj)
            y = obj.RR3/obj.D;
        end
        function y = get.RS2(obj)
            y = obj.RS3-obj.WSY;
        end
        function i2dUpdate_WST_By_AIRGAPFLUX_NS_BST_LSTACK(obj)
            obj.WST = obj.AIRGAPFLUX/obj.NS/obj.BST/obj.LSTACK/1e-6;
        end
        function i2dUpdate_WSY_By_POLEFLUX_BSY_LSTACK(obj)
            obj.WSY = obj.POLEFLUX/2/obj.BSY/obj.LSTACK/1e-6;
        end
        function i2dUpdate_WRT_By_AIRGAPFLUX_NR_BRT_LSTACK(obj)
            obj.WRT = obj.AIRGAPFLUX/obj.NR/obj.BRT/obj.LSTACK/1e-6;
        end
        function i2dUpdate_WRY_By_POLEFLUX_BRY_LSTACK(obj)
            obj.WRY = obj.POLEFLUX/2/obj.BRY/obj.LSTACK/1e-6;
        end

        function set(obj,varname, varargin)
            varname = upper(strrep(varname, ' ', ''));
            obj.(['set_', varname])(varargin{:});
        end
        function i2dUpdate_IS_By_POUT_VS_PF(obj)
            obj.IS = obj.POUT/obj.VS/obj.PF;
        end
        function Update_All_Dependents(obj)
            mNames = methods(obj);
            for i = 1:numel(mNames)
                if length(mNames{i})>10
                    if mNames{i}(1:10) == 'i2dUpdate_'
                        obj.(mNames{i});
                    end
                end
            end
        end
    end
end
function PrintError(Message,varargin)
if nargin == 1
    error(Message);
elseif nargin == 2
    varargin{1}.String = '';
    varargin{1}.ForegroundColor = 'r';
    varargin{1}.String{1} = 'Error:';
    varargin{1}.String{2} = Message;
    varargin{1}.UserData = true;
else
    error('INTERNAL ERROR');
end
end
function PrintGoodMessage(varargin)
if nargin == 1
    varargin{1}.String = '';
    varargin{1}.ForegroundColor = 'b';
    varargin{1}.String{1} = 'Done!';
    varargin{1}.String{2} = 'Parameter has been set correctly.';
    varargin{1}.UserData = false;
elseif nargin>1
    error('INTERNAL ERROR');
end
end
function PrintWarning(Message,varargin)
if nargin == 1
    error(Message);
elseif nargin == 2
    varargin{1}.String = '';
    varargin{1}.ForegroundColor = 'm';
    varargin{1}.String{1} = 'Warning:';
    varargin{1}.String{2} = Message;
else
    error('INTERNAL ERROR');
end
end
